package model;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Shape;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;

/**
 * This is the Star class. Its Shape it a 10-pointed Polygon object.
 * @author 200009734
 *
 */
public class Star extends VectorShape{

	private final int pointNo = 10;
	private final double angleInDegree = 36;	//the angle for each point
	private final double totalDegree = 360;
	private int[] xPoints, yPoints;
	
	private double boundStartX, boundStartY, boundEndX, boundEndY;
	
	public Star(Color color, double startX, double startY, double endX, double endY, Observer observer) {
		
		super(color, startX, startY, endX, endY, observer);
	    shape = createStar(startX, startY, endX, endY);
	    history.add(copyShapeObject());
	    hisCol.add(color);
	    update();
	}
	/**
	 * Change the location by making a new star.
	 * Once changed, it is no longer newly created.
	 * A copy of the changed shape is added to the history.
	 * Current color is added to history of colors.
	 */
	public void changeLocation(double xDif, double yDif) {
		for(int i = 0; i < pointNo; i ++) {
			xPoints[i] += (int)xDif;
			yPoints[i] += (int)yDif;
		}
		shape = new Polygon(xPoints, yPoints, pointNo);
		history.add(copyShapeObject());
		hisCol.add(color);
		isNewlyCreated = false;
		update();
	}

	/**
	 * Change the size by making a new star
	 * Once changed, it is no longer newly created.
	 * A copy of the changed shape is added to the history.
	 * Current color is added to history of colors.
	 */
	@Override
	public void changeSize(double dif) {
		//faster the scaling speed.
		dif = dif * 5d;		
		if(!(boundEndX + dif == 0) && !(boundEndY + dif == 0)) {
			shape = createStar(boundStartX, boundStartY, boundEndX + dif, boundEndY + dif);
			isNewlyCreated = false;
			history.add(copyShapeObject());
			hisCol.add(color);
			update();
		}
	}
	/**
	 * Once changed size, it is no longer newly created.
	 * A copy of the changed shape is added to the history.
	 * changed color is added to history of colors.
	 */
	public void changeColor(Color color) {
		// TODO Auto-generated method stub
		this.color = color;
		isNewlyCreated = false;
		history.add(copyShapeObject());
		hisCol.add(color);
		update();
	}
	
	/**
	 * To calculate the coordinates of each point and generated a 10-point polygon as regular 5-pointed star
	 * Take the half the maxims between the horizontal distance and vertical distance as distance to the center from the vertice.
	 * @param startX the x coordinate of user's mouse press 
	 * @param startY the y coordinate of user's mouse press 
	 * @param endX the x coordinate of user's mouse release
	 * @param endY the y coordinate of user's mouse release
	 * @return a 5-pointed star
	 */
	private Polygon createStar(double startX, double startY, double endX, double endY) {		
		/* 
		 * I figured out the algorithms myself. Cheers!
		 * The coordinates are generated by allocating each point with 18 degree and working with trigonometric functions.
		 */
		double boundEdgeLength = Math.max(Math.abs(startX - endX), Math.abs(startY - endY));
	    double halfEdgeLength = 0.5 * boundEdgeLength;
	    boundStartX = Math.min(startX, endX);
	    boundEndX =  boundStartX + boundEdgeLength;
	    boundStartY = Math.min(startY, endY);
	    boundEndY = boundStartY + boundEdgeLength;
	    
	    double angleInRad = angleInDegree/totalDegree * 2 * Math.PI;
	    double halfAngleInRad = angleInRad/2;
	    
	    double midX = boundStartX + halfEdgeLength;
	    double midY = boundStartY + halfEdgeLength;
	    
	    double X1 = midX;
	    double Y1 = boundStartY;
	    double X2 = boundStartX + boundEdgeLength;
	    double Y2 = midY - halfEdgeLength * Math.tan(halfAngleInRad);
	    double X3 = midX + halfEdgeLength * Math.sin(angleInRad);
	    double Y3 = midY + halfEdgeLength * Math.cos(angleInRad);
	    double X4 = midX - halfEdgeLength * Math.sin(angleInRad);
	    double Y4 = Y3;
	    double X5 = boundStartX;
	    double Y5 = Y2;
	    
	    double temp = halfEdgeLength * Math.tan(halfAngleInRad);
	    double temp2 = temp / Math.cos(angleInRad);
	    		
	    double x1 = midX + temp * Math.tan(angleInRad);
	    double y1 = Y2;
	    double x2 = midX + temp2 * Math.cos(halfAngleInRad);
	    double y2 = midY + temp2 * Math.sin(halfAngleInRad);
	    double x3 = midX;
	    double y3 = midY + temp2;
	    double x4 = midX - temp2 * Math.cos(halfAngleInRad);
	    double y4 = y2;
	    double x5 = midX - temp * Math.tan(angleInRad);
	    double y5 = y1;
	    
	    xPoints = new int[10];
	    xPoints[0] = (int)X1;
	    xPoints[1] = (int)x1;
	    xPoints[2] = (int)X2;
	    xPoints[3] = (int)x2;
	    xPoints[4] = (int)X3;
	    xPoints[5] = (int)x3;
	    xPoints[6] = (int)X4;
	    xPoints[7] = (int)x4;
	    xPoints[8] = (int)X5;
	    xPoints[9] = (int)x5;
	    
	    yPoints = new int[10];
	    yPoints[0] = (int)Y1;
	    yPoints[1] = (int)y1;
	    yPoints[2] = (int)Y2;
	    yPoints[3] = (int)y2;
	    yPoints[4] = (int)Y3;
	    yPoints[5] = (int)y3;
	    yPoints[6] = (int)Y4;
	    yPoints[7] = (int)y4;
	    yPoints[8] = (int)Y5;
	    yPoints[9] = (int)y5;
	    
	    
	    return new Polygon(xPoints, yPoints, pointNo);
	    
	}
	@Override
	protected Shape copyShapeObject() {
		// TODO Auto-generated method stub
		Polygon star = (Polygon)shape;
		return new Polygon(star.xpoints, star.ypoints, star.npoints);
	}
	
}
